"use client"

import React from "react";
import Chart from "react-apexcharts";
import dynamic from "next/dynamic";
// const Chart = dynamic(() => import("react-apexcharts"), { ssr: false });

const data = {
    series: [
        {
            data: [
                {
                    x: new Date("2024-02-13").getTime(),
                    y: [4967.94, 4971.30, 4920.31, 4953.17]
                },
                {
                    x: new Date("2024-02-12").getTime(),
                    y: [5026.83, 5048.39, 4920.31, 4953.17]
                },
                {
                    x: new Date("2024-02-05").getTime(),
                    y: [4957.19, 5030.06, 4918.09, 5026.61]
                },
                {
                    x: new Date("2024-01-29").getTime(),
                    y: [4892.95, 4975.29, 4845.15, 4958.61]
                },
                {
                    x: new Date("2024-01-22").getTime(),
                    y: [4853.42, 4906.69, 4844.05, 4890.97]
                },
                {
                    x: new Date("2024-01-15").getTime(),
                    y: [4772.35, 4842.07, 4714.82, 4839.81]
                },
                {
                    x: new Date("2024-01-08").getTime(),
                    y: [4703.70, 4802.40, 4699.82, 4783.83]
                },
                {
                    x: new Date("2024-01-01").getTime(),
                    y: [4745.20, 4754.33, 4682.11, 4697.24]
                },
                {
                    x: new Date("2023-12-25").getTime(),
                    y: [4758.86, 4793.30, 4751.99, 4769.83]
                },
                {
                    x: new Date("2023-12-18").getTime(),
                    y: [4725.58, 4778.01, 4697.82, 4754.63]
                },
                {
                    x: new Date("2023-12-11").getTime(),
                    y: [4593.39, 4738.57, 4593.39, 4719.19]
                },
                {
                    x: new Date("2023-12-04").getTime(),
                    y: [4564.37, 4609.23, 4546.50, 4604.37]
                },
                {
                    x: new Date("2023-11-27").getTime(),
                    y: [4554.86, 4599.39, 4537.24, 4594.63]
                },
                {
                    x: new Date("2023-11-20").getTime(),
                    y: [4511.70, 4568.43, 4510.36, 4559.34]
                },
                {
                    x: new Date("2023-11-13").getTime(),
                    y: [4406.66, 4521.17, 4393.82, 4514.02]
                },
                {
                    x: new Date("2023-11-06").getTime(),
                    y: [4364.27, 4418.03, 4343.94, 4415.24]
                },
                {
                    x: new Date("2023-10-29").getTime(),
                    y: [4139.39, 4373.62, 4132.94, 4358.34]
                },
                {
                    x: new Date("2023-10-22").getTime(),
                    y: [4210.40, 4259.38, 4103.78, 4117.37]
                },
                {
                    x: new Date("2023-10-15").getTime(),
                    y: [4342.37, 4393.57, 4223.03, 4224.16]
                },
                {
                    x: new Date("2023-10-08").getTime(),
                    y: [4289.02, 4385.85, 4283.79, 4327.78]
                },
                {
                    x: new Date("2023-10-01").getTime(),
                    y: [4284.52, 4324.10, 4216.45, 4308.50]
                },
                {
                    x: new Date("2023-09-24").getTime(),
                    y: [4310.62, 4338.51, 4238.63, 4288.05]
                },
                {
                    x: new Date("2023-09-17").getTime(),
                    y: [4445.13, 4466.36, 4316.49, 4320.06]
                },
                {
                    x: new Date("2023-09-10").getTime(),
                    y: [4480.98, 4511.99, 4447.21, 4450.32]
                },
                {
                    x: new Date("2023-09-03").getTime(),
                    y: [4510.06, 4514.29, 4430.46, 4457.49]
                },
                {
                    x: new Date("2023-08-27").getTime(),
                    y: [4426.03, 4541.25, 4414.98, 4515.77]
                },
                {
                    x: new Date("2023-08-20").getTime(),
                    y: [4380.28, 4458.30, 4356.29, 4405.71]
                },
                {
                    x: new Date("2023-08-13").getTime(),
                    y: [4458.13, 4490.33, 4435.31, 4436.97]
                },
                {
                    x: new Date("2023-08-06").getTime(),
                    y: [4491.58, 4527.37, 4443.98, 4464.05]
                },
                {
                    x: new Date("2023-07-30").getTime(),
                    y: [4584.82, 4594.22, 4474.55, 4478.03]
                },
                {
                    x: new Date("2023-07-23").getTime(),
                    y: [4543.39, 4607.07, 4528.56, 4582.23]
                },
                {
                    x: new Date("2023-07-16").getTime(),
                    y: [4508.86, 4578.43, 4504.90, 4536.34]
                },
                {
                    x: new Date("2023-07-09").getTime(),
                    y: [4394.23, 4527.76, 4389.92, 4505.42]
                },
                {
                    x: new Date("2023-07-02").getTime(),
                    y: [4450.48, 4456.46, 4385.05, 4398.95]
                },
                {
                    x: new Date("2023-06-25").getTime(),
                    y: [4344.84, 4584.84, 4328.08, 450.38]
                },
                {
                    x: new Date("2023-06-18").getTime(),
                    y: [4396.11, 4400.15, 4341.34, 4348.33]
                },
                {
                    x: new Date("2023-06-11").getTime(),
                    y: [4308.32, 4484.47, 4304.37, 4409.59]
                },
                {
                    x: new Date("2023-06-04").getTime(),
                    y: [4282.99, 4322.62, 4261.07, 4298.86]
                },
                {
                    x: new Date("2023-05-28").getTime(),
                    y: [4226.71, 4290.67, 4166.15, 4282.37]
                },
                {
                    x: new Date("2023-05-21").getTime(),
                    y: [4190.78, 4212.87, 4103.98, 4205.45]
                },
                {
                    x: new Date("2023-05-14").getTime(),
                    y: [4126.65, 4212.91, 4109.86, 4191.98]
                },
                {
                    x: new Date("2023-05-07").getTime(),
                    y: [4136.98, 4154.28, 4098.92, 4124.08]
                },
                {
                    x: new Date("2023-04-30").getTime(),
                    y: [4166.79, 4186.92, 4048.28, 4136.25]
                },
                {
                    x: new Date("2023-04-23").getTime(),
                    y: [4132.07, 4170.06, 4049.35, 4169.48]
                },
                {
                    x: new Date("2023-04-16").getTime(),
                    y: [4137.17, 4169.48, 4113.86, 4133.52]
                },
                {
                    x: new Date("2023-04-09").getTime(),
                    y: [4085.20, 4163.19, 4072.55, 4137.64]
                },
                {
                    x: new Date("2023-04-02").getTime(),
                    y: [4102.20, 4133.13, 4069.84, 4105.02]
                },
                {
                    x: new Date("2023-03-26").getTime(),
                    y: [3982.93, 4010.75, 3951.53, 4009.31]
                },
                {
                    x: new Date("2023-03-19").getTime(),
                    y: [3917.47, 3039.49, 3909.16, 3970.99]
                },
                {
                    x: new Date("2023-03-12").getTime(),
                    y: [3835.12, 3964.46, 3808.86, 3916.64]
                },
                {
                    x: new Date("2023-03-06").getTime(),
                    y: [3055.15, 3078.49, 3846.32, 3861.59]
                },
                {
                    x: new Date("2023-02-27").getTime(),
                    y: [3992.36, 4048.29, 3928.16, 4045.64]
                },
                {
                    x: new Date("2023-02-20").getTime(),
                    y: [3052.35, 3052.35, 3943.08, 3970.04]
                },
                {
                    x: new Date("2023-02-13").getTime(),
                    y: [3096.62, 4159.77, 3047.95, 3079.09]
                }
            ],
        },
    ],
    options: {
        chart: {
            type: "candlestick",
            height: 350,
        },
        title: {
            text: "S&P 500",
            align: "left",
        },
        xaxis: {
            type: "datetime",
        },
        yaxis: {
            tooltip: {
                enabled: true,
            },
        },
    },
};

function SP500() {
    return (
        <div id="chartContainer" className="border-2 border-accent rounded p-4">
            <Chart
                type="candlestick"
                height={400}
                // @ts-ignore
                options={data.options}
                series={data.series}
            />
        </div>
    );
}

export default SP500;
